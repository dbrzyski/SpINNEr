addpath('C:\Users\DB4899\OneDrive - Hitachi Energy\Documents\Personal\SpinnerCode\SpinnerCode2025')
% rmpath('C:\Users\DB4899\OneDrive - Hitachi Energy\Documents\Personal\LogisticSpinner\spinnerCode')
% rmpath('C:\Users\DB4899\OneDrive - Hitachi Energy\Documents\Personal\LogisticSpinner\LogisticSpinnerCode')

%% Settings
p        = 60;
n        = 150;
sigStr   = 2;

%% Data
% true signal 
rng(1)
B1      = sigStr*ones(5,5);
B2      = -sigStr*ones(5,5);
B3      = sigStr*ones(4,4);
sNods   = size(B1,1) + size(B2,1) + size(B3,1);
B       = blkdiag(zeros(5,5), B1, zeros(6,6), B2, zeros(7,7), B3, zeros(p - sNods - 18, p- sNods - 18));

% regressor matrices 
AA               = randn([p, p, n]);
AA               = AA + permute(AA, [2 1 3]); % matrices are symmetric
AA2              = reshape(AA, [p^2, n]);
AA2              = zscore(AA2')';             % standardize data
idxsDiag         = logical(reshape(eye(p,p),[p^2,1]));
AA2(idxsDiag,:)  = 0;                         % zeros on the diagonals
AA               = reshape(AA2, [p, p, n]);   % 3-way tensor of symmetric matrices with zeros on diagonals and standardized across 3rd dimension

% response generating
sigma            = 1;               % noise level
eps              = sigma*randn(n,1);
y                = AA2'*B(:) + eps;  % we have:   y_i = <A_i, B> + eps_i
X                = ones(n,1);

%% Run the code
fit_settings = struct(...
    'Family', 'Gaussian',...
    'Method', 'CV' ,...
    'UseParallel', true, ...
    'gridLengthN', 5, ...
    'gridLengthL', 5, ...
    'gridParameter', 0.75,...
    'kfolds', 5,...
    'initLambda', 1,...
    'zeroSearchRatio', 100,...
    'maxLambAcc', 1e-2 ...
    );

% y = max(sign(y),0);
% fit_settings = struct(...
%     'Family', 'Binomial',...
%     'Method', 'CV' ,...
%     'UseParallel', true, ...
%     'gridLengthN', 5, ...
%     'gridLengthL', 5, ...
%     'gridParameter', 0.75,...
%     'kfolds', 5,...
%     'initLambda', 1,...
%     'zeroSearchRatio', 100,...
%     'maxLambAcc', 1e-2, ...
%     'maxIters', 100 ...
%     );

% measure time
tic()
sp = spinner(y, X, AA);
sp.fit(fit_settings(:))
toc()
